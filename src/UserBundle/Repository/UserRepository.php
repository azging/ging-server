<?php

namespace UserBundle\Repository;

use UtilBundle\Container\StringUtilService;
use UtilBundle\Container\TimeUtilService;
use UtilBundle\Container\UtilService;

use BaseBundle\Container\BaseConst;
use UserBundle\Container\UserConst;
use UtilBundle\Container\UtilConst;

use UserBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * cyy, since 1.0
     *
     * 2017-05-19
     *
     * 将用户填写的注册数据写入数据库
     */
    public function insertUser($infoArr = array()) {

        $user = new User();

        $uuid = StringUtilService::getGuid();
        $cid = StringUtilService::getGuid();
        // 从2017-05-19 00:00:00开始，3小时增加一个权重，新用户权重高
        $weight = UserConst::USER_DEFAULT_WEIGHT + (intval(time()) - 1495123200) / 10800;
        $user->setUuid($uuid);
        $user->setCid($cid);
        $user->setType(UserConst::USER_TYPE_COMMON);
        $user->setWeight($weight);
        $user->setBaseWeight($weight);
        $user->setIsValid(BaseConst::IS_VALID_TRUE);
        $user->setLiveCityId(UtilConst::LOC_CITY_ID_DEFAULT);
        $user->setLiveCityName(UtilConst::LOC_CITY_NAME_DEFAULT);
        $user->setLng(UtilConst::LOC_LNG_DEFAULT);
        $user->setLat(UtilConst::LOC_LAT_DEFAULT);

        $user = $this->updateUser($user, $infoArr);

        return $user;
    }

    /**
     * cyy, since 1.0
     *
     * 2017-05-19
     *
     * update user info
     */
    public function updateUser($user, $infoArr = array()) {
        if (is_array($infoArr)) {
            while (list($key, $value) = each($infoArr)) {
                $func = 'set' . $key;
                $user->$func($value);
            }
        }
        $nowTime = TimeUtilService::getCurrentDateTime();
        $user->setUpdateTime($nowTime);
        $this->_em->persist($user);
        $this->_em->flush($user);
        return $user;
    }

    /** 
     * cyy, since 1.0
     *
     * 2017-05-18
     *
     * 根据某个字段查找User
     */
    public function selectOneUserByProp($prop, $value, $isValid = true) {
        $user = null;
        if (empty($prop)) {
            return null;
        }   
        if ($isValid) {
            $user = $this->_em->getRepository('UserBundle:User')->findOneBy(array($prop => $value, 'isValid' => BaseConst::IS_VALID_TRUE));
        } else {
            $func = 'findOneBy' . ucfirst($prop);
            $user = $this->_em->getRepository('UserBundle:User')->$func($value);
        }   
        return $user;
    }
}
